#!/usr/bin/env python

import json
from string import Template
import textwrap


def mywrap(s):
    lines = textwrap.wrap(s, 60, initial_indent='', subsequent_indent=' '*16,
                          break_on_hyphens=False)
    return ' \\\n'.join(lines)


def format_packages(key, dependencies, result):
    names = []
    names_doc = []
    names_dev = []
    for d in dependencies:
        name = d.get(key)
        if name is not None:
            if d['purpose'] == 'doc':
                names_doc.append(name)
            elif d['purpose'] == 'dev':
                names_dev.append(name)
            else:
                names.append(name)
    names = ' '.join(names)
    names_doc = ' '.join(names_doc)
    names_dev = ' '.join(names_dev)

    if len(names) > 0:
        result['dependencies_%s' % key] = mywrap(names)
    if len(names_doc) > 0:
        result['doc_dependencies_%s' % key] = mywrap(names_doc)
    if len(names_dev) > 0:
        result['dev_dependencies_%s' % key] = mywrap(names_dev)


def format_list(suffix, line_formatter, dependencies, result):
    lines = []
    lines_doc = []
    lines_dev = []
    for d in dependencies:
        line = line_formatter(d)
        if line is not None:
            if d['purpose'] == 'doc':
                lines_doc.append(line)
            elif d['purpose'] == 'dev':
                lines_dev.append(line)
            else:
                lines.append(line)
    result['dependencies_%s' % suffix] = '\n'.join(lines)
    result['doc_dependencies_%s' % suffix] = '\n'.join(lines_doc)
    result['dev_dependencies_%s' % suffix] = '\n'.join(lines_dev)


def formatter_rst(d):
    line = '* %s %s: %s' % (d['title'], d['version_requirement'], d['homepage'])
    comment = d.get('comment')
    if comment is not None:
        line += ' (%s)' % comment
    return line


def formatter_macports_rst(d):
    macports_name = d.get('macports_name')
    if macports_name is not None:
        macports_url = d['macports_url']
        return '* ``%s``: %s' % (macports_name, macports_url)


def formatter_macports_command(d):
    macports_name = d.get('macports_name')
    if macports_name is not None:
        macports_command = d['macports_command']
        return '    %s' % (macports_command)


def collect_fields():
    # Load the dependencies data
    with open('../dependencies.txt') as f:
        dependencies = json.load(f)

    result = {}

    # dependencies_rst and dep_dependencies_rst
    format_list('rst', formatter_rst, dependencies, result)

    # dependencies_fedora_22_rpm and doc_dependencies_fedora_22_rpm
    format_packages('fedora_22_rpm', dependencies, result)
    format_packages('fedora_22_pip', dependencies, result)
    format_packages('fedora_21_rpm', dependencies, result)
    format_packages('fedora_21_pip', dependencies, result)
    format_packages('ubuntu_15_deb', dependencies, result)
    format_packages('ubuntu_15_pip', dependencies, result)
    format_packages('ubuntu_12_deb', dependencies, result)
    format_packages('ubuntu_12_pip', dependencies, result)
    format_packages('macports_pip', dependencies, result)

    # macports stuff
    format_list('macports_rst', formatter_macports_rst, dependencies, result)
    format_list('macports_command', formatter_macports_command, dependencies, result)


    # turn dependencies into a dictonary to get a few final things
    dependencies = dict((d['name'], d) for d in dependencies)
    result['custom_install_libxc'] = dependencies['libxc']['install_command']
    result['custom_install_libint'] = dependencies['libint']['install_command']

    return result


big_fat_warning = """\
..
    : THIS FILE IS AUTOMATICALLY GENERATED. CHANGES TO THIS FILE WILL BE OVERWRITTEN
    : WHEN REBUILDING THE DOCUMENTATION. MAKE CHANGES IN
    :     %s
    : OR
    :     ../dependencies.txt
    : INSTEAD.

"""


def substitute_file(fields, fn):
    assert fn.endswith('.template')
    fields['big_fat_warning'] = big_fat_warning % fn
    with open(fn) as f:
        t = Template(f.read())
    with open(fn[:-9], 'w') as f:
        f.write(t.safe_substitute(fields))


def main():
    fields = collect_fields()
    substitute_file(fields, 'user_download_and_install_linux.rst.template')
    substitute_file(fields, 'user_download_and_install_mac.rst.template')


if __name__ == '__main__':
    main()
